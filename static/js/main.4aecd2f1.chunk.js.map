{"version":3,"sources":["component/square.jsx","component/gameField.jsx","component/board.jsx","App.js","reportWebVitals.js","index.js"],"names":["Square","row","column","indexRow","indexColumn","onClick","board","className","GameField","play","useState","setBoard","useEffect","rows","cols","defaultValue","arr","i","push","Array","j","matrix","interval","setInterval","newState","length","forEach","square","nearbyLiving","clearInterval","handleClick","map","item","Board","setPlay","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4aecd2f1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ indexRow, indexColumn, onClick, board }) => {\r\n  const getSquareClasses = (row, column) => {\r\n    // console.log(row, column, board, board[row][column]);\r\n\r\n    return board[row][column] === 1 ? \"square fill\" : \"square\";\r\n  };\r\n  const handleClick = () => {\r\n    // console.log(indexRow, indexColumn);\r\n    onClick(indexRow, indexColumn);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={getSquareClasses(indexRow, indexColumn)}\r\n      onClick={handleClick}\r\n      key={indexRow + \"_\" + indexColumn}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Square from \"./square\";\r\n\r\nconst ROWS = 20;\r\nconst COLUMNS = 50;\r\n\r\nconst matrix = (rows, cols, defaultValue = 0) => {\r\n  let arr = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    arr.push([]);\r\n    arr[i].push(new Array(cols));\r\n    for (let j = 0; j < cols; j++) {\r\n      arr[i][j] = defaultValue;\r\n    }\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\nconst GameField = ({ play }) => {\r\n  const [board, setBoard] = useState(); // useState(() => matrix(ROWS, COLUMNS, 0));\r\n  useEffect(() => {\r\n    setBoard(matrix(ROWS, COLUMNS, 0));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // console.log(\"useEffect\");\r\n      // console.log(\"play\", play);\r\n\r\n      if (play) {\r\n        const newState = [];\r\n\r\n        for (let i = 0; i < board.length; i++) {\r\n          newState.push([]);\r\n          newState[i].push(new Array(board[i].length));\r\n          for (let j = 0; j < board[i].length; j++) {\r\n            newState[i][j] = board[i][j];\r\n          }\r\n        }\r\n\r\n        board.forEach((row, indexRow) => {\r\n          row.forEach((square, indexColumn) => {\r\n            let nearbyLiving = 0;\r\n\r\n            if (\r\n              indexRow &&\r\n              indexColumn &&\r\n              board[indexRow - 1][indexColumn - 1]\r\n            ) {\r\n              nearbyLiving++;\r\n            }\r\n            if (indexRow && board[indexRow - 1][indexColumn]) {\r\n              nearbyLiving++;\r\n            }\r\n            if (\r\n              indexRow &&\r\n              indexColumn !== row.length - 1 &&\r\n              board[indexRow - 1][indexColumn + 1]\r\n            ) {\r\n              nearbyLiving++;\r\n            }\r\n            if (indexColumn && board[indexRow][indexColumn - 1]) {\r\n              nearbyLiving++;\r\n            }\r\n            if (\r\n              indexColumn !== row.length - 1 &&\r\n              board[indexRow][indexColumn + 1]\r\n            ) {\r\n              nearbyLiving++;\r\n            }\r\n            if (\r\n              indexRow !== board.length - 1 &&\r\n              indexColumn &&\r\n              board[indexRow + 1][indexColumn - 1]\r\n            ) {\r\n              nearbyLiving++;\r\n            }\r\n            if (\r\n              indexRow !== board.length - 1 &&\r\n              board[indexRow + 1][indexColumn]\r\n            ) {\r\n              nearbyLiving++;\r\n            }\r\n            if (\r\n              indexRow !== board.length - 1 &&\r\n              indexColumn !== row.length - 1 &&\r\n              board[indexRow + 1][indexColumn + 1]\r\n            ) {\r\n              nearbyLiving++;\r\n            }\r\n\r\n            if (nearbyLiving < 2 || nearbyLiving > 3) {\r\n              if (square) {\r\n                newState[indexRow][indexColumn] = 0;\r\n              }\r\n            }\r\n\r\n            if (nearbyLiving === 3) {\r\n              if (!square) {\r\n                newState[indexRow][indexColumn] = 1;\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        setBoard(newState);\r\n      }\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  const handleClick = (indexRow, indexColumn) => {\r\n    const newState = [];\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n      newState.push([]);\r\n      newState[i].push(new Array(board[i].length));\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        newState[i][j] = board[i][j];\r\n      }\r\n    }\r\n    board[indexRow][indexColumn] === 0\r\n      ? (newState[indexRow][indexColumn] = 1)\r\n      : (newState[indexRow][indexColumn] = 0);\r\n\r\n    setBoard(newState);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {board\r\n        ? board.map((row, indexRow) => {\r\n            return (\r\n              <div className=\"row\" key={indexRow}>\r\n                {row.map((item, indexColumn) => {\r\n                  return (\r\n                    <Square\r\n                      indexRow={indexRow}\r\n                      indexColumn={indexColumn}\r\n                      onClick={handleClick}\r\n                      board={board}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })\r\n        : \"Loading.. \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameField;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GameField from \"./gameField\";\r\n\r\nconst Board = () => {\r\n  const [play, setPlay] = useState(0);\r\n\r\n  // let play = 0;\r\n\r\n  const start = () => {\r\n    console.log(\"start\");\r\n\r\n    // play ? (play = 0) : (play = 1);\r\n\r\n    play ? setPlay(0) : setPlay(1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button onClick={() => start()}>Start</button>\r\n      <GameField play={play} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n\r\n// const Board = () => {\r\n//   const [board, setBoard] = useState(); // useState(() => matrix(ROWS, COLUMNS, 0));\r\n//   let play = 0;\r\n//   useEffect(() => {\r\n//     setBoard(matrix(ROWS, COLUMNS, 0));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const interval = setInterval(() => {\r\n//       // console.log(\"useEffect\");\r\n//       // console.log(\"play\", play);\r\n\r\n//       if (play) {\r\n//         console.log(\"refresh\");\r\n//         console.log(\"play\", play);\r\n\r\n//         const newState = [];\r\n\r\n//         for (let i = 0; i < board.length; i++) {\r\n//           newState.push([]);\r\n//           newState[i].push(new Array(board[i].length));\r\n//           for (let j = 0; j < board[i].length; j++) {\r\n//             newState[i][j] = board[i][j];\r\n//           }\r\n//         }\r\n\r\n//         board.forEach((row, indexRow) => {\r\n//           row.forEach((square, indexColumn) => {\r\n//             let nearbyLiving = 0;\r\n\r\n//             if (\r\n//               indexRow &&\r\n//               indexColumn &&\r\n//               board[indexRow - 1][indexColumn - 1]\r\n//             ) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (indexRow && board[indexRow - 1][indexColumn]) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (\r\n//               indexRow &&\r\n//               indexColumn !== row.length - 1 &&\r\n//               board[indexRow - 1][indexColumn + 1]\r\n//             ) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (indexColumn && board[indexRow][indexColumn - 1]) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (\r\n//               indexColumn !== row.length - 1 &&\r\n//               board[indexRow][indexColumn + 1]\r\n//             ) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (\r\n//               indexRow !== board.length - 1 &&\r\n//               indexColumn &&\r\n//               board[indexRow + 1][indexColumn - 1]\r\n//             ) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (\r\n//               indexRow !== board.length - 1 &&\r\n//               board[indexRow + 1][indexColumn]\r\n//             ) {\r\n//               nearbyLiving++;\r\n//             }\r\n//             if (\r\n//               indexRow !== board.length - 1 &&\r\n//               indexColumn !== row.length - 1 &&\r\n//               board[indexRow + 1][indexColumn + 1]\r\n//             ) {\r\n//               nearbyLiving++;\r\n//             }\r\n\r\n//             if (nearbyLiving < 2 || nearbyLiving > 3) {\r\n//               if (square) {\r\n//                 newState[indexRow][indexColumn] = 0;\r\n//               }\r\n//             }\r\n\r\n//             if (nearbyLiving === 3) {\r\n//               if (!square) {\r\n//                 newState[indexRow][indexColumn] = 1;\r\n//               }\r\n//             }\r\n//           });\r\n//         });\r\n\r\n//         setBoard(newState);\r\n//       }\r\n//     }, 500);\r\n//     return () => clearInterval(interval);\r\n//   });\r\n\r\n//   const handleClick = (indexRow, indexColumn) => {\r\n//     const newState = [];\r\n\r\n//     for (let i = 0; i < board.length; i++) {\r\n//       newState.push([]);\r\n//       newState[i].push(new Array(board[i].length));\r\n//       for (let j = 0; j < board[i].length; j++) {\r\n//         newState[i][j] = board[i][j];\r\n//       }\r\n//     }\r\n//     board[indexRow][indexColumn] === 0\r\n//       ? (newState[indexRow][indexColumn] = 1)\r\n//       : (newState[indexRow][indexColumn] = 0);\r\n\r\n//     setBoard(newState);\r\n//   };\r\n\r\n//   const start = () => {\r\n//     console.log(\"start\");\r\n\r\n//     play ? (play = 0) : (play = 1);\r\n//     // const newState = [];\r\n//     // for (let i = 0; i < board.length; i++) {\r\n//     //   newState.push([]);\r\n//     //   newState[i].push(new Array(board[i].length));\r\n//     //   for (let j = 0; j < board[i].length; j++) {\r\n//     //     newState[i][j] = board[i][j];\r\n//     //   }\r\n//     // }\r\n//     // board.forEach((row, indexRow) => {\r\n//     //   row.forEach((square, indexColumn) => {\r\n//     //     let nearbyLiving = 0;\r\n//     //     if (indexRow && indexColumn && board[indexRow - 1][indexColumn - 1]) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (indexRow && board[indexRow - 1][indexColumn]) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (\r\n//     //       indexRow &&\r\n//     //       indexColumn !== row.length - 1 &&\r\n//     //       board[indexRow - 1][indexColumn + 1]\r\n//     //     ) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (indexColumn && board[indexRow][indexColumn - 1]) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (\r\n//     //       indexColumn !== row.length - 1 &&\r\n//     //       board[indexRow][indexColumn + 1]\r\n//     //     ) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (\r\n//     //       indexRow !== board.length - 1 &&\r\n//     //       indexColumn &&\r\n//     //       board[indexRow + 1][indexColumn - 1]\r\n//     //     ) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (indexRow !== board.length - 1 && board[indexRow + 1][indexColumn]) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (\r\n//     //       indexRow !== board.length - 1 &&\r\n//     //       indexColumn !== row.length - 1 &&\r\n//     //       board[indexRow + 1][indexColumn + 1]\r\n//     //     ) {\r\n//     //       nearbyLiving++;\r\n//     //     }\r\n//     //     if (nearbyLiving < 2 || nearbyLiving > 3) {\r\n//     //       if (square) {\r\n//     //         newState[indexRow][indexColumn] = 0;\r\n//     //       }\r\n//     //     }\r\n//     //     if (nearbyLiving === 3) {\r\n//     //       if (!square) {\r\n//     //         newState[indexRow][indexColumn] = 1;\r\n//     //       }\r\n//     //     }\r\n//     //   });\r\n//     // });\r\n//     // setBoard(newState);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <button onClick={() => start()}>Start</button>\r\n//       {board\r\n//         ? board.map((row, indexRow) => {\r\n//             return (\r\n//               <div className=\"row\" key={indexRow}>\r\n//                 {row.map((item, indexColumn) => {\r\n//                   return (\r\n//                     <Square\r\n//                       indexRow={indexRow}\r\n//                       indexColumn={indexColumn}\r\n//                       onClick={handleClick}\r\n//                       board={board}\r\n//                     />\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n//             );\r\n//           })\r\n//         : \"Loading.. \"}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Board;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./component/board\";\n\nfunction App() {\n  return (\n    <Board />\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}